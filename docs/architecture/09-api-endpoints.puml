@startuml LibraryApp API Endpoints
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

/' Assumption: RESTful API design with proper HTTP methods and status codes '/
/' Assumption: JWT authentication required for protected endpoints '/

title API Endpoints Diagram - LibraryApp REST API

package "Authentication" {
    [POST /api/users/register] as register
    [POST /api/users/login] as login
    [POST /api/users/logout] as logout
    [POST /api/users/refresh] as refresh
}

package "Users" {
    [GET /api/users] as getAllUsers
    [GET /api/users/{id}] as getUserById
    [PUT /api/users/{id}] as updateUser
    [DELETE /api/users/{id}] as deleteUser
    [HEAD /api/users/{id}] as userExists
    [PUT /api/users/{id}/promote] as promoteUser
    [PUT /api/users/{id}/demote] as demoteUser
    [PUT /api/users/{id}/password] as updateUserPassword
    [GET /api/users/me] as getCurrentUser
    [GET /api/users/my-borrowed-books] as getMyBorrowedBooks
    [GET /api/users/my-favorite-books] as getMyFavoriteBooks
    [POST /api/users/my-favorites/{bookId}] as addToMyFavorites
    [DELETE /api/users/my-favorites/{bookId}] as removeFromMyFavorites
    [GET /api/users/{userId}/borrowed-books] as getBorrowedBooks
    [GET /api/users/{userId}/favorite-books] as getFavoriteBooks
    [POST /api/users/{userId}/favorites/{bookId}] as addToFavorites
    [DELETE /api/users/{userId}/favorites/{bookId}] as removeFromFavorites
    [GET /api/users/email-exists] as emailExists
    [GET /api/users/debug-auth] as debugAuth
    [GET /api/users/debug-loans] as debugLoans
}

package "Books" {
    [POST /api/books] as addBook
    [GET /api/books] as getAllBooks
    [GET /api/books/list] as getAllBooksForList
    [GET /api/books/{id}] as getBookById
    [PUT /api/books/{id}] as updateBook
    [DELETE /api/books/{id}] as deleteBook
    [HEAD /api/books/{id}] as bookExists
    [GET /api/books/{id}/cover] as getBookCover
    [DELETE /api/books/{id}/cover] as deleteBookCover
    [POST /api/books/{id}/borrow] as borrowBook
    [POST /api/books/{id}/return] as returnBook
    [GET /api/books/authors/{id}/exists] as authorExists
    [GET /api/books/authors/{id}/books] as getAuthorBooks
    [GET /api/books/publishers/{id}/exists] as publisherExists
    [GET /api/books/publishers/{id}/books] as getPublisherBooks
    [GET /api/books/{id}/borrowed-by/{userId}] as getBookBorrowedByUser
    [GET /api/books/{id}/status-for-user] as getBookStatusForUser
    [POST /api/books/status-for-user-batch] as getBookStatusForUserBatch
    [GET /api/books/{id}/favorite-count] as getBookFavoriteCount
    [GET /api/books/{id}/favorited-by/{userId}] as isBookFavoritedByUser
    [GET /api/books/{id}/favorited-by-users] as getUsersWhoFavoritedBook
}

package "Authors" {
    [GET /api/authors] as getAllAuthors
    [GET /api/authors/details] as getAuthorsWithDetails
    [POST /api/authors] as addAuthor
    [GET /api/authors/{id}] as getAuthorById
    [PUT /api/authors/{id}] as updateAuthor
    [DELETE /api/authors/{id}] as deleteAuthor
    [GET /api/authors/{id}/books] as getAuthorBooks
    [GET /api/authors/{id}/book-count] as getAuthorBookCount
    [GET /api/authors/{id}/profile-image] as getAuthorProfileImage
    [DELETE /api/authors/{id}/profile-image] as deleteAuthorProfileImage
}

package "Publishers" {
    [GET /api/publishers] as getAllPublishers
    [GET /api/publishers/details] as getPublishersWithDetails
    [POST /api/publishers] as addPublisher
    [GET /api/publishers/{id}] as getPublisherById
    [PUT /api/publishers/{id}] as updatePublisher
    [DELETE /api/publishers/{id}] as deletePublisher
    [GET /api/publishers/{id}/books] as getPublisherBooks
    [GET /api/publishers/{id}/book-count] as getPublisherBookCount
    [GET /api/publishers/{id}/logo-image] as getPublisherLogoImage
    [DELETE /api/publishers/{id}/logo-image] as deletePublisherLogoImage
}

@enduml