@startuml Class Diagram

!theme vibrant

' Entities
class User {
  +UserId: int
  +Name: string
  +Email: string
  +Password: string
  +Role: UserRole
  +RegistrationDate: DateTime
  +Age: int?
  +Gender: string?
  +Address: string?
  +PromoteToAdmin()
  +DemoteToUser()
  +UpdatePassword(newPassword: string)
  +UpdateProfile(...)
  +GetActiveLoans(): IEnumerable<Loan>
  +CanBorrowBooks(maxBooksAllowed: int): bool
  +HasOverdueBooks(): bool
}

class Book {
  +BookId: int
  +Title: string
  +PublicationYear: int
  +IsAvailable: bool
  +Rating: decimal
  +AuthorId: int
  +PublisherId: int
  +CategoryId: int
  +MarkAsBorrowed()
  +MarkAsReturned()
}

class Author {
  +AuthorId: int
  +Name: string
  +Biography: string?
  +BirthDate: DateTime?
  +Nationality: string?
}

class Publisher {
  +PublisherId: int
  +Name: string
  +Address: string?
  +Website: string?
  +ContactEmail: string?
  +EstablishedDate: DateTime?
}

class Category {
  +CategoryId: int
  +Name: string
  +Description: string?
}

class Loan {
  +LoanId: int
  +LoanDate: DateTime
  +DueDate: DateTime
  +ReturnDate: DateTime?
  +BookId: int
  +UserId: int
  +IsActive(): bool
  +IsOverdue(): bool
}

class UserFavoriteBook {
  +UserId: int
  +BookId: int
  +AddedDate: DateTime
}

enum UserRole {
  User
  Admin
}

' Relationships
User "1" -- "0..*" Loan : has
Book "1" -- "0..*" Loan : is part of

Author "1" -- "0..*" Book : writes
Publisher "1" -- "0..*" Book : publishes
Category "1" -- "0..*" Book : contains

User "1" -- "0..*" UserFavoriteBook : has
Book "1" -- "0..*" UserFavoriteBook : is part of

User -- UserRole

@enduml
