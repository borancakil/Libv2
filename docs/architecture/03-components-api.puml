@startuml LibraryApp API Components
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

/' Assumption: Components are organized in layers: Controllers, Services, Repositories, and Infrastructure '/
/' Assumption: JWT service handles both JWS signing and JWE encryption as per project requirements '/
/' Assumption: Logging is a cross-cutting concern handled in Infrastructure layer '/

title Component diagram for LibraryApp API

Container_Boundary(api, "ASP.NET Core API") {
    Component(usersController, "Users Controller", "REST API", "Handles user authentication, registration, and profile management")
    Component(booksController, "Books Controller", "REST API", "Handles book operations including borrowing and returning")
    Component(authorsController, "Authors Controller", "REST API", "Handles author management operations")
    Component(publishersController, "Publishers Controller", "REST API", "Handles publisher management operations")
    
    Component(userService, "User Service", "C# Service", "Handles user business logic and password hashing")
    Component(bookService, "Book Service", "C# Service", "Handles book business logic and availability checks")
    Component(authorService, "Author Service", "C# Service", "Handles author business logic")
    Component(publisherService, "Publisher Service", "C# Service", "Handles publisher business logic")
    Component(categoryService, "Category Service", "C# Service", "Handles category business logic")
    
    Component(jwtService, "JWT Service", "C# Service", "Handles JWT token generation, validation, and encryption")
    
    Component(userRepository, "User Repository", "Domain Interface", "Handles User entity operations")
    Component(bookRepository, "Book Repository", "Domain Interface", "Handles Book entity operations")
    Component(authorRepository, "Author Repository", "Domain Interface", "Handles Author entity operations")
    Component(publisherRepository, "Publisher Repository", "Domain Interface", "Handles Publisher entity operations")
    Component(categoryRepository, "Category Repository", "Domain Interface", "Handles Category entity operations")
    Component(loanRepository, "Loan Repository", "Domain Interface", "Handles Loan entity operations")
    
    Component(userRepoImpl, "User Repository Impl", "EF Core", "Concrete implementation using DbContext")
    Component(bookRepoImpl, "Book Repository Impl", "EF Core", "Concrete implementation using DbContext")
    Component(authorRepoImpl, "Author Repository Impl", "EF Core", "Concrete implementation using DbContext")
    Component(publisherRepoImpl, "Publisher Repository Impl", "EF Core", "Concrete implementation using DbContext")
    Component(categoryRepoImpl, "Category Repository Impl", "EF Core", "Concrete implementation using DbContext")
    Component(loanRepoImpl,. "Loan Repository Impl", "EF Core", "Concrete implementation using DbContext")
    
    Component(dbContext, "LibraryDbContext", "EF Core", "Database context and entity configurations")
    
    Component(loggingService, "Logging Service", "Serilog", "Handles application logging and error tracking")
    
    Component(userDtos, "User DTOs", "Data Transfer Objects", "UserDto, CreateUserDto, UpdateUserDto, etc.")
    Component(bookDtos, "Book DTOs", "Data Transfer Objects", "BookDto, CreateBookDto, BorrowBookDto, etc.")
    Component(authorDtos, "Author DTOs", "Data Transfer Objects", "AuthorDto, CreateAuthorDto, UpdateAuthorDto")
    Component(publisherDtos, "Publisher DTOs", "Data Transfer Objects", "PublisherDto, CreatePublisherDto, UpdatePublisherDto")
    Component(categoryDtos, "Category DTOs", "Data Transfer Objects", "CategoryDto, CreateCategoryDto, UpdateCategoryDto")
}

ContainerDb(database, "SQL Database", "Microsoft SQL Server", "Stores all library data")

Rel(usersController, userService, "Uses", "")
Rel(usersController, userDtos, "Uses", "")
Rel(booksController, bookService, "Uses", "")
Rel(booksController, bookDtos, "Uses", "")
Rel(authorsController, authorService, "Uses", "")
Rel(authorsController, authorDtos, "Uses", "")
Rel(publishersController, publisherService, "Uses", "")
Rel(publishersController, publisherDtos, "Uses", "")

Rel(userService, jwtService, "Uses for authentication", "")
Rel(userService, userRepository, "Uses", "")
Rel(userService, userDtos, "Uses", "")
Rel(bookService, bookRepository, "Uses", "")
Rel(bookService, bookDtos, "Uses", "")
Rel(authorService, authorRepository, "Uses", "")
Rel(authorService, authorDtos, "Uses", "")
Rel(publisherService, publisherRepository, "Uses", "")
Rel(publisherService, publisherDtos, "Uses", "")
Rel(categoryService, categoryRepository, "Uses", "")
Rel(categoryService, categoryDtos, "Uses", "")

Rel(userService, loggingService, "Logs operations", "")
Rel(bookService, loggingService, "Logs operations", "")
Rel(jwtService, loggingService, "Logs authentication", "")

Rel(userRepository, userRepoImpl, "Implemented by", "")
Rel(bookRepository, bookRepoImpl, "Implemented by", "")
Rel(authorRepository, authorRepoImpl, "Implemented by", "")
Rel(publisherRepository, publisherRepoImpl, "Implemented by", "")
Rel(categoryRepository, categoryRepoImpl, "Implemented by", "")
Rel(loanRepository, loanRepoImpl, "Implemented by", "")

Rel(userRepoImpl, dbContext, "Uses", "")
Rel(bookRepoImpl, dbContext, "Uses", "")
Rel(authorRepoImpl, dbContext, "Uses", "")
Rel(publisherRepoImpl, dbContext, "Uses", "")
Rel(categoryRepoImpl, dbContext, "Uses", "")
Rel(loanRepoImpl, dbContext, "Uses", "")

Rel(dbContext, database, "Reads from and writes to", "ADO.NET/EF Core")

footer Generated on %date("yyyy-MM-dd HH:mm:ss", "Europe/Istanbul") | LibraryApp v1.0

@enduml
